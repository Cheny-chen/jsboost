(a=>{"use strict";function b(a,b,c){if("function"!=typeof c)throw new TypeError("Given listener should be a function");const e=function(...f){const{_event_queue:g,_handle_promise:h}=d.get(this),i=b.toString(),j=g[i]=g[i]||[];let k=j.indexOf(e);return h?Promise.resolve(c.call(a,...f)).then(()=>{0<=k&&j.splice(k,1)}):(c.call(a,...f),void(0<=k&&j.splice(k,1)))};return e}const c=a.EventEmitter,d=new WeakMap;class e{constructor(){const a={};d.set(this,a),a._event_queue=[]}addListener(a,b){if("function"!=typeof b)throw new TypeError("Given listener should be a function");const{_event_queue:c}=d.get(this),e=a.toString(),f=c[e]=c[e]||[];return f.push(b),this}on(a,b){let c=`${a}`.trim();if(0<c.length){c=c.split(",");for(let a of c)this.addListener(a.trim(),b)}return this}once(a,c){let d=`${a}`.trim();return 0<d.length&&([a]=d.split(",")),this.addListener(a,b(this,a,c))}removeListener(a,b){const{_event_queue:c}=d.get(this),e=a.toString(),f=c[e];if(f)for(let a;0<=(a=f.indexOf(b));)f.splice(a,1);return this}removeAllListeners(a){const b=d.get(this),c=a.toString();return delete b._event_queue[c],this}off(a,b){let c=`${a}`.trim();if(0===c.length)return this;if(c=c.split(","),1===arguments.length){for(let a of c)this.removeAllListeners(a.trim());return this}for(let d of c)this.removeListener(d.trim(),b);return this}dispatch(a,...b){const{_event_queue:c}=d.get(this),e=a.toString(),f=c[e];if(Array.isArray(f))for(let a of f)a.call(this,...b);return this}async dispatchAwait(a,...b){const{_event_queue:c}=d.get(this),e=a.toString(),f=c[e];if(Array.isArray(f))for(let a of f)await a.call(this,...b);return this}emit(a,...b){return this.dispatch(a,...b)}emitAwait(a,...b){return this.dispatchAwait(a,...b)}listeners(a){const{_event_queue:b}=d.get(this),c=a.toString();return(b[c]||[]).slice(0)}get events(){const{_event_queue:a}=d.get(this),b=[];for(let c in a)a.hasOwnProperty(c)&&(0===a[c].length||b.push(c));return b}set events(a){throw new TypeError("Cannot assign to read only property 'events' of <EventEmitter>")}static get version(){return"1.0.0"}static set version(a){throw new TypeError("Cannot assign to read only property 'version' of <EventEmitter>")}static noConflict(){return c&&(a.EventEmitter=c),a.EventEmitter}}a.EventEmitter=e})("undefined"==typeof window?"undefined"==typeof module?{}:module.exports:window);