const VERSION="1.0.0",WEAK_RELATION_MAP=new WeakMap;export class EventEmitter{constructor(){const a={};WEAK_RELATION_MAP.set(this,a),a._event_queue=[]}addListener(a,b){if("function"!=typeof b)throw new TypeError("Given listener should be a function");const{_event_queue:c}=WEAK_RELATION_MAP.get(this),d=a.toString(),e=c[d]=c[d]||[];return e.push(b),this}on(a,b){let c=`${a}`.trim();if(0<c.length){c=c.split(",");for(let d of c)this.addListener(d.trim(),b)}return this}once(a,b){let c=`${a}`.trim();return 0<c.length&&([a]=c.split(",")),this.addListener(a,__ONCE_WRAPPER(this,a,b))}removeListener(a,b){const{_event_queue:c}=WEAK_RELATION_MAP.get(this),d=a.toString(),e=c[d];if(e)for(let f;0<=(f=e.indexOf(b));)e.splice(f,1);return this}removeAllListeners(a){const b=WEAK_RELATION_MAP.get(this),c=a.toString();return delete b._event_queue[c],this}off(a,b){let c=`${a}`.trim();if(0===c.length)return this;if(c=c.split(","),1===arguments.length){for(let d of c)this.removeAllListeners(d.trim());return this}for(let d of c)this.removeListener(d.trim(),b);return this}dispatch(a,...b){const{_event_queue:c}=WEAK_RELATION_MAP.get(this),d=a.toString(),e=c[d];if(Array.isArray(e))for(let f of e)f.call(this,event,...b);return this}async dispatchAwait(a,...b){const{_event_queue:c}=WEAK_RELATION_MAP.get(this),d=a.toString(),e=c[d];if(Array.isArray(e))for(let f of e)await f.call(this,...b);return this}emit(a,...b){return this.dispatch(a,...b)}emitAwait(a,...b){return this.dispatchAwait(a,...b)}listeners(a){const{_event_queue:b}=WEAK_RELATION_MAP.get(this),c=a.toString();return(b[c]||[]).slice(0)}get events(){const{_event_queue:a}=WEAK_RELATION_MAP.get(this),b=[];for(let c in a)a.hasOwnProperty(c)&&(0===a[c].length||b.push(c));return b}set events(a){throw new TypeError("Cannot assign to read only property 'events' of <EventEmitter>")}static get version(){return VERSION}static set version(a){throw new TypeError("Cannot assign to read only property 'version' of <EventEmitter>")}}function __ONCE_WRAPPER(a,b,c){if("function"!=typeof c)throw new TypeError("Given listener should be a function");const d=function(...e){const{_event_queue:f,_handle_promise:g}=WEAK_RELATION_MAP.get(this),h=b.toString(),i=f[h]=f[h]||[];let j=i.indexOf(d);return g?Promise.resolve(c.call(a,...e)).then(()=>{0<=j&&i.splice(j,1)}):(c.call(a,...e),void(0<=j&&i.splice(j,1)))};return d}
